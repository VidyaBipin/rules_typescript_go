# Copyright 2017 The Bazel Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Helpers for computing the node_modules_root.
"""

load("@build_bazel_rules_nodejs//internal/common:node_module_info.bzl", "NodeModuleInfo")

def compute_node_modules_root(ctx):
  """Computes the node_modules root from the node_modules and deps attributes.

  Args:
    ctx: the skylark execution context

  Returns:
    The node_modules root as a string
  """
  node_modules_root = None
  if ctx.files.node_modules:
    # ctx.files.node_modules is not an empty list
    node_modules_root = "/".join([f for f in [
        ctx.attr.node_modules.label.workspace_root,
        ctx.attr.node_modules.label.package,
        "node_modules"] if f])
  for d in ctx.attr.deps:
    if NodeModuleInfo in d:
      possible_root = "/".join(["external", d[NodeModuleInfo].workspace, "node_modules"])
      if not node_modules_root:
        node_modules_root = possible_root
      elif node_modules_root != possible_root:
        fail("All npm dependencies need to come from a single workspace. Found '%s' and '%s'." % (node_modules_root, possible_root))
  if not node_modules_root:
      # there are no fine grained deps and the node_modules attribute is an empty filegroup
      # but we still need a node_modules_root even if its empty
      node_modules_root = "/".join([f for f in [
          ctx.attr.node_modules.label.workspace_root,
          ctx.attr.node_modules.label.package,
          "node_modules"] if f])
  return node_modules_root
